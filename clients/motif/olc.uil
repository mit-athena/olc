!
!	OLC Motif client
!
!	Chris VanHaren
!

module olc
	version = 'v1.0'
	names = case_sensitive
	objects = {
		separator = gadget;
		label = gadget;
		text = widget;
		push_button = widget;
		toggle_button = widget;
		cascade_button = widget;
	}

include file 'XmAppl.uil';

!
! External procedures used in callbacks.
!

procedure
	olc_new_ques	();
	olc_cont_ques	();
	olc_stock	();
	olc_help	();
	olc_quit	();
	olc_send	();
	olc_done	();
	olc_cancel	();
	olc_savelog	();
	olc_motd	();
	olc_update	();
	dlg_ok		(integer);
	dlg_cancel	(integer);
	widget_create	(integer);

!
! Value declarations.
!

value

! Fonts.

	TitleFont:	font('-adobe-times-bold-i-*-*-*-240-*');
	WelcomeFont:	font('-adobe-times-bold-i-*-*-*-180-*');
	CopyrightFont:	font('-adobe-times-bold-i-*-*-*-140-*');
	ButtonFont1:	font('-adobe-times-medium-i-*-*-*-140-*');
	ButtonFont2:	font('-adobe-times-bold-i-*-*-*-140-*');
	DialogFont:	font('-adobe-times-medium-r-*-*-*-140-*');
	LabelFont1:	font('-adobe-times-medium-r-*-*-*-120-*');
	LabelFont2:	font('-adobe-times-medium-i-*-*-*-120-*');
	Courier12:	font('-adobe-courier-medium-r-*-*-*-120-*');
	Courier14:	font('-adobe-courier-medium-r-*-*-*-140-*');
	Fixed:		font('fixed');

! Widget_create callback values.

	NEWQ_BTN:	1;
	CONTQ_BTN:	2;
	STOCK_BTN:	3;
	QUIT_BTN:	4;
	HELP_BTN:	5;
	CONTQ_FORM:	6;
	CONNECT_LBL:	7;
	TOPIC_LBL:	8;
	REPLAY_SCRL:	9;
	SEND_BTN:	10;
	DONE_BTN:	11;
	CANCEL_BTN:	12;
	SAVELOG_BTN:	13;
	MOTD_BTN:	14;
	UPDATE_BTN:	15;
	MOTD_DLG:	16;
	HELP_DLG:	17;
	QUIT_DLG:	18;
	ERROR_DLG:	19;
	MOTD_FORM:	20;
	MOTD_SCRL:	21;

! Random integers, spacing, borders, and the like.

	Main_height:		32;
	Default_width:		530;
	Default_height:		318;
	Vert_spacing:		5;
	Horiz_spacing:		5;
	Normal_shadow:		2;
	Normal_border:		2;
	Menu_border:		1;
	Toggle_border:		1;
	Menu_spacing:		2;
	Quit_help_spacing:	5;
	Normal_spacing:		5;
	NONE:			0;

! Labels, Text strings

	New_Ques_label:	"Ask a question in OLC";
	Cont_Ques_label:"Continue your question in OLC";
	Stock_label:	"Browse the stock answers";
	Send_label:	"Send message";
	Done_label:	"Done question";
	Cancel_label:	"Cancel question";
	Save_label:	"Save log...";
	Motd_label:	"MOTD";
	Update_label:	"Update status";
	Quit_label:	"QUIT OLC";
	Help_label:	"HELP";
	Welcome_text:	"Welcome to Project Athena's On-Line Consulting system.";
	Copyright_text:	"Copyright (c) 1989 by the Massachusetts Institute of Technology.";
!	Help_text:	"Help is not yet implemented.";
	Topic_text:	"Your question topic is: ";
!
! The main form of the interface.  This is actually a "topbox" that lets
!  the user select whether to ask a question or go somewhere else for
!  help.  It also provides a "quit" and "help" button.
!

object main:	form {
	arguments {
		height = Default_height;
		width = Default_width;
		vertical_spacing = Vert_spacing;
		horizontal_spacing = Horiz_spacing;
		shadow_thickness = Normal_shadow;
		border_width = Normal_border;
	};
	controls {
		unmanaged push_button new_ques_btn;
		unmanaged push_button cont_ques_btn;
		push_button stock_btn;
		push_button quit_btn;
		push_button help_btn;
		unmanaged form cont_ques_form;
		unmanaged form motd_form;
		unmanaged message_dialog motd_dlg;
		unmanaged message_dialog help_dlg;
		unmanaged message_dialog quit_dlg;
		unmanaged message_dialog error_dlg;
	};
};

object new_ques_btn:	push_button {
	arguments {
		top_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
		font_list = ButtonFont1;
		label_string = New_Ques_label;
	};
	callbacks {
		create = procedure widget_create(NEWQ_BTN);
		activate = procedure olc_new_ques ();
	};
};

object cont_ques_btn:	push_button {
	arguments {
		top_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
!		left_widget = push_button new_ques_btn;
		font_list = ButtonFont1;
		label_string = Cont_Ques_label;
	};
	callbacks {
		create = procedure widget_create(CONTQ_BTN);
		activate = procedure olc_cont_ques ();
	};
};

object stock_btn:	push_button {
	arguments {
		top_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_WIDGET;
		left_widget = push_button cont_ques_btn;
		font_list = ButtonFont1;
		label_string = Stock_label;
	};
	callbacks {
		create = procedure widget_create(STOCK_BTN);
		activate = procedure olc_stock ();
	};
};

object quit_btn:	push_button {
	arguments {
		top_attachment = XmATTACH_FORM;
		right_attachment = XmATTACH_WIDGET;
		right_widget = push_button help_btn;
		font_list = ButtonFont2;
		label_string = Quit_label;
		margin_bottom = 2;
	};
	callbacks {
		create = procedure widget_create(QUIT_BTN);
		activate = procedure olc_quit ();
	};
};

object help_btn:	push_button {
	arguments {
		top_attachment = XmATTACH_FORM;
		right_attachment = XmATTACH_FORM;
		font_list = ButtonFont2;
		label_string = Help_label;
		margin_bottom = 2;
	};
	callbacks {
		create = procedure widget_create(HELP_BTN);
		activate = procedure olc_help ();
	};
};

!
! The "cont_ques_form" will contain regions for showing the replay of the log
!  in progress, as well as frames for sending a message to the
!  consultant and buttons for canceling, don'ing, and getting the MOTD.
!

object cont_ques_form:	form {
	arguments {
		right_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
		bottom_attachment = XmATTACH_FORM;
		top_attachment = XmATTACH_WIDGET;
		top_widget = push_button help_btn;
		width = Default_width;
		height = Default_height;
		vertical_spacing = Vert_spacing;
		horizontal_spacing = Horiz_spacing;
		shadow_thickness = NONE;
		border_width = NONE;
		margin_width = NONE;
		margin_height = NONE;
	};
	controls {
		separator title_separator;
		form status_form;
		frame replay_frame;
		row_column options_rowcol;
	};
	callbacks {
		create = procedure widget_create(CONTQ_FORM);
	};
};

object title_separator:		separator {
	arguments {
		orientation = XmHORIZONTAL;
		separator_type = XmSHADOW_ETCHED_IN;
		top_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
		right_attachment = XmATTACH_FORM;
	};
};

object status_form:	form {
	arguments {
		right_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
		top_attachment = XmATTACH_WIDGET;
		top_widget = separator title_separator;
	};
	controls {
		label connect_lbl;
		label topic_text;
		label topic_lbl;
	};
};

object connect_lbl:	label {
	arguments {
		top_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
		bottom_attachment = XmATTACH_FORM;
		alignment = XmALIGNMENT_CENTER;
		font_list = LabelFont1;
		label_label = "Status unknown.";
	};
	callbacks {
		create = procedure widget_create(CONNECT_LBL);
	};
};

object topic_text:	label {
	arguments {
		top_attachment = XmATTACH_FORM;
		bottom_attachment = XmATTACH_FORM;
		right_attachment = XmATTACH_WIDGET;
		right_widget = label topic_lbl;
		alignment = XmALIGNMENT_CENTER;
		font_list = LabelFont1;
		label_label = Topic_text;
	};
};

object topic_lbl:	label {
	arguments {
		top_attachment = XmATTACH_FORM;
		bottom_attachment = XmATTACH_FORM;
		right_attachment = XmATTACH_FORM;
		alignment = XmALIGNMENT_CENTER;
		font_list = LabelFont2;
		label_label = "unknown";
	};
	callbacks {
		create = procedure widget_create(TOPIC_LBL);
	};
};

object replay_frame:	frame {
	arguments {
		right_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
		top_attachment = XmATTACH_WIDGET;
		top_widget = form status_form;
		bottom_attachment = XmATTACH_WIDGET;
		bottom_widget = row_column options_rowcol;
		border_width = NONE;
		shadow_thickness = NONE;
	};
	controls {
		scrolled_text replay_scrl;
	};
};

object replay_scrl:	scrolled_text  {
	arguments {
		editable = false;
		edit_mode = XmMULTI_LINE_EDIT;
		font_list = Fixed;
		word_wrap = true;
		scroll_horizontal = false;
		scroll_vertical = true;
		scroll_left_side = true;
	};
	callbacks {
		create = procedure widget_create(REPLAY_SCRL);
	};
};

object options_rowcol:	row_column {
	arguments {
		left_attachment = XmATTACH_FORM;
		right_attachment = XmATTACH_FORM;
		bottom_attachment = XmATTACH_FORM;
		border_width = NONE;
		margin_width = NONE;
		margin_height = NONE;
		orientation = XmHORIZONTAL;
		packing = XmPACK_TIGHT;
	};
	controls {
		push_button send_btn;
		push_button done_btn;
		push_button cancel_btn;
		push_button savelog_btn;
		push_button motd_btn;
		push_button update_btn;
	};
};

object send_btn:		push_button {
	arguments {
		font_list = ButtonFont1;
		label_string = Send_label;
	};
	callbacks {
		create = procedure widget_create(SEND_BTN);
		activate = procedure olc_send ();
	};
};

object done_btn:		push_button {
	arguments {
		font_list = ButtonFont1;
		label_string = Done_label;
	};
	callbacks {
		create = procedure widget_create(DONE_BTN);
		activate = procedure olc_done ();
	};
};

object cancel_btn:		push_button {
	arguments {
		font_list = ButtonFont1;
		label_string = Cancel_label;
	};
	callbacks {
		create = procedure widget_create(CANCEL_BTN);
		activate = procedure olc_cancel ();
	};
};

object savelog_btn:		push_button {
	arguments {
		font_list = ButtonFont1;
		label_string = Save_label;
	};
	callbacks {
		create = procedure widget_create(SAVELOG_BTN);
		activate = procedure olc_savelog ();
	};
};

object motd_btn:		push_button {
	arguments {
		font_list = ButtonFont1;
		label_string = Motd_label;
	};
	callbacks {
		create = procedure widget_create(MOTD_BTN);
		activate = procedure olc_motd ();
	};
};

object update_btn:		push_button {
	arguments {
		font_list = ButtonFont1;
		label_string = Update_label;
	};
	callbacks {
		create = procedure widget_create(UPDATE_BTN);
		activate = procedure olc_update ();
	};
};

object motd_dlg:		message_dialog {
	arguments {
		dialog_style = XmDIALOG_APPLICATION_MODAL;
!		dialog_type = XmDIALOG_INFORMATION;
		button_font_list = ButtonFont1;
		text_font_list = DialogFont;
		message_alignment = XmALIGNMENT_BEGINNING;
		border_width = Normal_border;
	};
	callbacks {
		create = procedure widget_create(MOTD_DLG);
		ok = procedure dlg_ok(MOTD_DLG);
	};
};

object help_dlg:		message_dialog {
	arguments {
		dialog_style = XmDIALOG_APPLICATION_MODAL;
		button_font_list = ButtonFont1;
		text_font_list = DialogFont;
		message_alignment = XmALIGNMENT_BEGINNING;
		border_width = Normal_border;
	};
	callbacks {
		create = procedure widget_create(HELP_DLG);
		ok = procedure dlg_ok(HELP_DLG);
	};
};

object quit_dlg:		message_dialog {
	arguments {
		dialog_style = XmDIALOG_APPLICATION_MODAL;
		button_font_list = ButtonFont1;
		text_font_list = DialogFont;
		message_alignment = XmALIGNMENT_BEGINNING;
		border_width = Normal_border;
	};
	callbacks {
		create = procedure widget_create(QUIT_DLG);
		ok = procedure dlg_ok(QUIT_DLG);
		cancel = procedure dlg_cancel(QUIT_DLG);
	};
};

object error_dlg:	message_dialog {
	arguments {
		dialog_style = XmDIALOG_APPLICATION_MODAL;
		button_font_list = ButtonFont1;
		text_font_list = DialogFont;
		message_alignment = XmALIGNMENT_BEGINNING;
!		default_button_type = XmDIALOG_OK_BUTTON;
		border_width = Normal_border;
	};
	callbacks {
		create = procedure widget_create(ERROR_DLG);
	};
};









!
! The "motd_form" will contain the motd at start up time.  The MOTD
!  will be displayed initially until the user wants to do something else,
!  then it will be unmanaged and the new thing popped in it's place.
!

object motd_form:	form {
	arguments {
		right_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
		top_attachment = XmATTACH_WIDGET;
		bottom_attachment = XmATTACH_FORM;
		top_widget = push_button help_btn;
		width = Default_width;
		vertical_spacing = Vert_spacing;
		horizontal_spacing = Horiz_spacing;
		shadow_thickness = NONE;
		border_width = NONE;
		margin_width = NONE;
		margin_height = NONE;
	};
	controls {
		separator motd_separator;
		label welcome_lbl;
		label copyright_lbl;
		frame motd_frame;
	};
	callbacks {
		create = procedure widget_create(MOTD_FORM);
	};
};

object motd_separator:		separator {
	arguments {
		orientation = XmHORIZONTAL;
		separator_type = XmSHADOW_ETCHED_IN;
		top_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
		right_attachment = XmATTACH_FORM;
	};
};

object welcome_lbl:	label {
	arguments {
		right_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
		alignment = XmALIGNMENT_CENTER;
		top_attachment = XmATTACH_WIDGET;
		top_widget = separator motd_separator;
		font_list = WelcomeFont;
		label_label = Welcome_text;
	};
};

object copyright_lbl:		label {
	arguments {
		right_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
		alignment = XmALIGNMENT_CENTER;
		top_attachment = XmATTACH_WIDGET;
		top_widget = label welcome_lbl;
		font_list = CopyrightFont;
		label_label = Copyright_text;
	};
};

object motd_frame:	frame {
	arguments {
		right_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
		top_attachment = XmATTACH_WIDGET;
		top_widget = label copyright_lbl;
		bottom_attachment = XmATTACH_FORM;
		border_width = NONE;
		shadow_thickness = NONE;
	};
	controls {
		scrolled_text motd_scrl;
	};
};

object motd_scrl:	scrolled_text  {
	arguments {
		editable = false;
		edit_mode = XmMULTI_LINE_EDIT;
		font_list = DialogFont;
		word_wrap = true;
!
!  Serious brain damage here.  Have to leave the horizontal scrollbar on
!  in order to display the motd correctly.
		scroll_horizontal = false;
		scroll_vertical = true;
		scroll_left_side = true;
	};
	callbacks {
		create = procedure widget_create(MOTD_SCRL);
	};
};

end module;


