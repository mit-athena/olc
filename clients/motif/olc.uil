!
!	OLC Motif client
!
!	Chris VanHaren
!

module olc
	version = 'v1.0'
	names = case_sensitive
	objects = {
		separator = gadget ;
		label = gadget ;
		text = widget ;
		push_button = widget ;
		toggle_button = widget ;
		cascade_button = widget;
	}

include file 'XmAppl.uil';

!
! External procedures used in callbacks
!

procedure
	olc_send	(string);
	olc_done	(string);
	olc_cancel	(string);
	olc_save_log	(string);
	olc_stock	(string);
	olc_motd	(string);
	olc_help	(string);
	olc_quit	(string);
	olc_general	(string);
	Scroll		();

!
! Value declarations
!

value

! Fonts

	TitleFont:	font('*-times-bold-i-*-*-*-240-*');
	ButtonFont:	font('*-times-medium-i-*-*-*-140-*');
	Courier:	font('*-courier-medium-r-*-*-*-140-*');

! Integers

	Default_width:		486;
	Default_height:		318;
	Vert_spacing:		5;
	Horiz_spacing:		10;
	Normal_shadow:		2;
	Normal_border:		2;
	Menu_border:		1;
	Toggle_border:		1;
	Menu_spacing:		2;
	Inner_horiz_spacing:	5;
	Inner_vert_spacing:	0;
	Inner_form_width:	200;
	Inner_form_height:	25;
	Bottom_form_spacing:	25;
	Text_columns:		40;
	Normal_spacing:		5;
	Max_file_name_len:	190;
	Max_ptr_name_len:	20;
	Max_pgs_len:		4;

! Labels

	Title_label:	"OLC";
	Send_label:	"Send message to consultant";
	Done_label:	"Mark the question DONE";
	Cancel_label:	"Cancel your question";
	Save_label:	"Save this conversation in a file...";
	Stock_label:	"Browse the stock answers";
	Motd_label:	"Display the message of the day";
	Quit_label:	"QUIT OLC";
	Help_label:	"HELP";
	Help_text:	"Help is not yet implemented.";

! Colors and color tables

	yellow:		color('yellow', foreground);
	red:		color('red', background);

	ct:	color_table(	yellow='o',
					red='.',
					background color=' ');
	ct_hilite:	color_table(	yellow='.',
					red='o',
					background color=' ');

! Button icons

	scroll_up_icon: icon(color_table=ct,
		'                        ',
		'           oo           ',
		'          oooo          ',
		'         oooooo         ',
		'        oo....oo        ',
		'       oo......oo       ',
		'      oo........oo      ',
		'     oo..........oo     ',
		'    oo............oo    ',
		'   oo..............oo   ',
		'  oo................oo  ',
		' oooooo..........oooooo ',
		' oooooo..........oooooo ',
		'     oo..........oo     ',
		'     oo..........oo     ',
		'     oo..........oo     ',
		'     oo..........oo     ',
		'     oo..........oo     ',
		'     oooooooooooooo     ',
		'                        ');

	scroll_down_icon: icon(color_table=ct,
		'                        ',
		'     oooooooooooooo     ',
		'     oo..........oo     ',
		'     oo..........oo     ',
		'     oo..........oo     ',
		'     oo..........oo     ',
		'     oo..........oo     ',
		' oooooo..........oooooo ',
		' oooooo..........oooooo ',
		'  oo................oo  ',
		'   oo..............oo   ',
		'    oo............oo    ',
		'     oo..........oo     ',
		'      oo........oo      ',
		'       oo......oo       ',
		'        oo....oo        ',
		'         oooooo         ',
		'          oooo          ',
		'           oo           ',
		'                        ');

! The main form of the interface

object main:			form {
	arguments {
		width = Default_width;
		height = Default_height;
		vertical_spacing = Vert_spacing;
		horizontal_spacing = Horiz_spacing;
		shadow_thickness = Normal_shadow;
		border_width = Normal_border;
	};
	controls {
		label title;
		separator title_separator;
		frame replay_window;
		separator bottom_separator;
		row_column options_menu;
	};
};

object title:			label {
	arguments {
		top_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
		font_list = TitleFont;
		label_label = Title_label;
	};
};

object title_separator:		separator {
	arguments {
		orientation = XmHORIZONTAL;
		separator_type = XmSHADOW_ETCHED_IN;
	        top_attachment = XmATTACH_WIDGET;
		top_widget = label title;
		left_attachment = XmATTACH_FORM;
		right_attachment = XmATTACH_FORM;
	};
};

object replay_window:		frame {
	arguments {
		right_attachment = XmATTACH_FORM;
		left_attachment = XmATTACH_FORM;
		top_attachment = XmATTACH_WIDGET;
		top_widget = separator title_separator;
		bottom_attachment = XmATTACH_WIDGET;
		bottom_widget = separator bottom_separator;
	};
	controls {
		scrolled_window replaybox;
	};
};

object replaybox:		scroll_window  {
	arguments {
		scrolling_policy = XmAPPLICATION_DEFINED;
		visual_policy = XmVARIABLE;
		update_slider_size = true;
		scroll_bar_display_policy = XmSTATIC;
		vertical_scroll_bar = scroll_bar scrbar;
		work_window = text replbox;
		scroll_bar_placement = XmBOTTOM_LEFT;
	};
	controls {
		scroll_bar scrbar;
		text replbox;
	};
};

object scrbar:			scroll_bar {
	arguments{
		orientation = XmVERTICAL;
		unit_type = 0;
		processing_direction = XmMAX_ON_BOTTOM;
		show_arrows = true;
		initial_delay = 1;
	};
	callbacks {
		value_changed = procedure Scroll();
	};
};

object replbox:			text {
	arguments{
		editable = false;
		unit_type = 0;
		text_value = "This is where the replay would go...";
		font_list = Courier;
		word_wrap = true;
	};
};

object bottom_separator:	separator {
	arguments {
		orientation = XmHORIZONTAL;
		separator_type = XmSHADOW_ETCHED_IN;
!!	        top_attachment = XmATTACH_WIDGET;
!!		top_widget = frame replay_window;
	        bottom_attachment = XmATTACH_WIDGET;
		bottom_widget = row_column options_menu;
		left_attachment = XmATTACH_FORM;
		right_attachment = XmATTACH_FORM;
	};
};

object options_menu:		row_column {
	arguments {
		left_attachment = XmATTACH_FORM;
		right_attachment = XmATTACH_FORM;
		bottom_attachment = XmATTACH_FORM;
!!		top_attachment = XmATTACH_WIDGET;
!!		top_widget = separator bottom_separator;
		orientation = XmHORIZONTAL;
		packing = XmPACK_TIGHT;
	};
	controls {
		push_button send;
		push_button done;
		push_button cancel;
		push_button save_log;
		push_button stock;
		push_button motd;
		push_button quit;
		push_button help;
	};
};

object send:		push_button {
	arguments {
		font_list = ButtonFont;
		label_string = Send_label;
	};
	callbacks {
		activate = procedure olc_general ("Send");
	};
};

object done:		push_button {
	arguments {
		font_list = ButtonFont;
		label_string = Done_label;
	};
	callbacks {
		activate = procedure olc_general ("Done");
	};
};

object cancel:		push_button {
	arguments {
		font_list = ButtonFont;
		label_string = Cancel_label;
	};
	callbacks {
		activate = procedure olc_general ("Cancel");
	};
};

object save_log:	push_button {
	arguments {
		font_list = ButtonFont;
		label_string = Save_label;
	};
	callbacks {
		activate = procedure olc_general ("Save");
	};
};

object stock:		push_button {
	arguments {
		font_list = ButtonFont;
		label_string = Stock_label;
	};
	callbacks {
		activate = procedure olc_general ("Stock");
	};
};

object motd:		push_button {
	arguments {
		font_list = ButtonFont;
		label_string = Motd_label;
	};
	callbacks {
		activate = procedure olc_general ("Motd");
	};
};

object quit:		push_button {
	arguments {
		font_list = ButtonFont;
		label_string = Quit_label;
	};
	callbacks {
		activate = procedure olc_general ("Quit");
	};
};

object help:		push_button {
	arguments {
		font_list = ButtonFont;
		label_string = Help_label;
	};
	callbacks {
		activate = procedure olc_general ("Help");
	};
};

object help_dialog  :  information_dialog {
	arguments {
		dialog_style = XmDIALOG_APPLICATION_MODAL;
		message_string = Help_text;
		default_button_type = XmDIALOG_OK_BUTTON;
		border_width = Normal_border;
		shadow_thickness = Normal_shadow;
	};
};

object errorbox  :  error_dialog {
	arguments {
		dialog_style = XmDIALOG_APPLICATION_MODAL;
		default_button_type = XmDIALOG_OK_BUTTON;
		border_width = Normal_border;
		shadow_thickness = Normal_shadow;
	};
};


end module;


